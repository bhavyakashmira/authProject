// Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  coverImg         String?
  profileImg       String?
  email            String          @unique
  firstName        String?
  lastName         String?
  username         String?         @unique
  dateOfBirth      DateTime?
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  books            Book[]
  comments         Comment[]
  Authenticators   Authenticator[]
  
  followers        Follower[]      @relation("UserFollowers")
  following        Follower[]      @relation("UserFollowing")
  bookmarks        Bookmark[]
  likedBooks       LikedBook[]
  recentReads      RecentRead[]
  completedReads   CompletedRead[]

  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model Bookmark {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  book      Book    @relation(fields: [bookId], references: [id])
  bookId    String
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @db.ObjectId
  createdAt DateTime @default(now())
}

model LikedBook {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    String
  createdAt DateTime @default(now())
}

model RecentRead {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    String
  lastReadAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CompletedRead {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  book        Book     @relation(fields: [bookId], references: [id])
  bookId      String
  completedAt DateTime

  createdAt   DateTime @default(now())
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Category {
  id     String  @id @default(cuid()) @map("_id")
  slug   String  @unique
  title  String
  img    String?
  books  Book[]
}

model Book {
  id         String     @id @default(cuid()) @map("_id")
  createdAt  DateTime   @default(now())
  slug       String     @unique
  title      String
  desc       String
  likes      Int        @default(0)
  img        String?
  chapters   Chapter[]
  userEmail  String
  user       User       @relation(fields: [userEmail], references: [email])
  catslug    String
  category   Category   @relation(fields: [catslug], references: [slug])
  bookmarks  Bookmark[]
  likedBooks LikedBook[]
  recentReads RecentRead[]
  completedReads CompletedRead[]
}

model Follower {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  follower   User     @relation("UserFollowers"  ,fields: [followerId], references: [id])
  followerId String    @db.ObjectId
  following  User     @relation("UserFollowing"  ,fields: [followingId], references: [id])
  followingId String   @db.ObjectId
  createdAt  DateTime @default(now())
}

model Chapter {
  id          String    @id @default(cuid()) @map("_id")
  createdAt   DateTime  @default(now())
  slug        String    @unique
  story       String
  title       String
  img         String?
  views       Int       @default(0)
  bookslug    String
  book        Book      @relation(fields: [bookslug], references: [slug])
  comments    Comment[]
}

model Comment {
  id          String    @id @default(cuid()) @map("_id")
  createdAt   DateTime  @default(now())
  desc        String
  userEmail   String
  user        User      @relation(fields: [userEmail], references: [email])
  chapterSlug String
  chapter     Chapter   @relation(fields: [chapterSlug], references: [slug])
}

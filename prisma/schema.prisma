// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//add the username unique as the route

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String          @unique
  firstName     String?
  lastName      String?
  username      String?         @unique
  dateOfBirth   DateTime?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  books         Book[]          // Changed "book" to plural
  comments      Comment[]       // Changed "comment" to plural
  Authenticators Authenticator[] // Changed "Authenticator" to plural

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? 
  access_token      String? 
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? 
  session_state     String?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Category {
  id     String  @id @default(cuid()) @map("_id")
  slug   String  @unique
  title  String
  img    String?
  books  Book[]  // Made consistent with plural naming
}

model Book {
  id         String     @id @default(cuid()) @map("_id")
  createdAt  DateTime   @default(now())
  slug       String     @unique
  title      String
  desc       String
  likes      Int      @default(0)
  img        String?
  chapters   Chapter[]  // Changed "chapter" to plural
  userEmail  String
  user       User       @relation(fields: [userEmail], references: [email])
  catslug    String
  category   Category   @relation(fields: [catslug], references: [slug]) 
}
 
model Chapter {
  id         String    @id @default(cuid()) @map("_id")
  createdAt  DateTime  @default(now())
  slug       String    @unique
  story      String
  title      String
  img        String?
  views      Int       @default(0)
  bookslug   String
  book       Book      @relation(fields: [bookslug], references: [slug])
  comments   Comment[] 
}

model Comment {
  id          String    @id @default(cuid()) @map("_id")
  createdAt   DateTime  @default(now())
  desc        String
  userEmail   String
  user        User      @relation(fields: [userEmail], references: [email])
  chapterSlug String
  chapter     Chapter   @relation(fields: [chapterSlug], references: [slug])
}
